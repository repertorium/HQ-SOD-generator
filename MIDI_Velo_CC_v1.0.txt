// MIDI_Velo_CC, Xackley 5-15-2008

/*
 When sending Velocity to CC
A note that is out of range, above Max Note or below Min Note, will send No CC.
A note's velocity that is out of range, above Max Vel or below Min, will send No CC.
When the generated CC is  out of range, above Max CC, or below Min CC, the Max CC or Min CC will be sent.

When Sending CC to Velocity
A note that is out of range,  above Max Note or below Min Note, will send the original velocity.
A note Velocity that is out of range, above Max Vel or below Min Vel, will send the original Velocity.
The Min CC and Max CC act as limiters.
When a CC is below Min CC, the Min CC will be used for the Notes Velocity.
When a CC is above Max CC, the Mac CC will be used for the Notes Velocity.

There are a set of Filters in the first control for direction, and the midi data to be sent. 
If you end up with no sound, there is a reset to start over.
It is easy to filter out everything. The 2 meters for Velocity and CC will let you know what the program is recieving/generating, I would recommend a MIDI Monitor before and after this plugin if you are trying anything complicated.
This site has a simple monitor http://www.s-production.de/index_vst.html
 */

desc:vel to cc, Top to Bottom - OR - cc to vel Bottom to Top

slider1:1<0,15,1{Velocity to CC - Allow All Messages Through,Velocity to CC - Block Messages in Note Channel,Velocity to CC - Send Only Generated CC,CC to Velocity - Allow All Messages Through,CC to Velocity - Block CC in Note Channel,CC to Velocity - Send Only Generated Note}>Direction
slider2:0<0,1,1{No, Yes}>Reset
slider3:1<0,15,1{0 Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Note Channel
slider4:1  <1,127,1>Minimum Note 
slider5:127<1,127,1>Maximum Note
slider6:1  <1,127,1>Minimum Velocity
slider7:127<1,127,1>Maximum Velocity
slider8:0<0,127,1>Meter Velocity

slider9:0<-127,127,1>Gain
slider10:0<,1,1{No,Yes}>Invert

slider11:0<0,127,1>Meter CC Value
slider12:1  <0,127,1>Minimum CC Value
slider13:127<0,127,1>Maximum CC Value
slider14:10<0,127,1{0 Bank Sel M,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 S.Release,73 S.Attack,74 S.Brightness,75 S.Ctrl 6,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>Controller

slider15:1<0,15,1{0 Any,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Control Channel



////////////////////////////////////////////////////////////////////


@slider

chanV = slider3 - 1;
chanC = slider15 - 1;

slidermove = 1 ;

PassN = slider1==0;
PassC = slider1==4;

VelToCC = Slider1<=2;
CCToVelo = Slider1>=3;

LastCC=Slider11;
CCtoVelo   ? (
		InVelo = LastCC;
		Slider10 == 1 ? OutVelo = 128 - (InVelo - Slider9);
		Slider10 == 0 ? OutVelo = InVelo + slider9;
		OutVelo > slider13 ? OutVelo = slider13;
		Outvelo < slider12 ? OutVelo = slider12;
		LastVelo = Outvelo;
		);
	
Slider2 ?(
	slider1 = 0;
	slider2 = 0;
	slider3 = 1;
	slider4 = 1;
	slider5 = 127;
	slider6 = 1;
	slider7 = 127;
	slider8 = 0;
	slider9 = 0;
	slider10= 0;
	slider11= 0;
	slider12= 1;
	slider13= 127;
	slider15 = 1;
	);



/////////////////////////////////////////////////////////////////////

@init

ext_noinit = 1 ;
OutVelo = 100;

chanV= slider3 - 1;
chanC= slider15 -1;





////////////////////////////////////////////////////////////////////

@sample


while ( midirecv(ts,msg1,msg23) ? (

	InMess = msg1 & 240;
	InChan = msg1 & 15;
	InVelo = (msg23/256)|0;
	InNote = msg23 & 127;



	//	passCC ? midisend(ts,msg1,msg23);

	OKchanV = InChan==chanV || slider3==0;
	OKchanC = InChan==chanC || slider15==0;
	
	(slider1==0 || InVelo==0 || (slider1==1 && Inchan!=ChanV)) && slider1!=2 ? midisend(ts,msg1,msg23);        

	(VelToCC && OKChanV && InMess == 144
	&& InNote>=Slider4 && InNote<=Slider5
	&& InVelo>=Slider6 && InVelo <=Slider7)
	?  (
		LastVelo = InVelo;
		Slider10 == 1 ? OutCC = 128 - (Invelo - Slider9);
		Slider10 == 0 ? OutCC = Invelo + slider9;
		OutCC > slider13 ? OutCC = slider13;
		OutCC < slider12 ? OutCC = slider12;
		ChanC >=0 ? (ChanCmsg1 = 176+ChanC):(ChanCmsg1 = 176+InChan);
		LastCC = OutCC;
		midisend(ts,ChanCmsg1,slider14|(OutCC*256));
		); 		
////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	CCtoVelo && OKChanC && InNote == slider14 && InMess == 176 ? (
		LastCC = InVelo;
		Slider10 == 1 ? OutVelo = 128 - (InVelo - Slider9);
		Slider10 == 0 ? OutVelo = InVelo + slider9;
		OutVelo > slider13 ? OutVelo = slider13;
		Outvelo < slider12 ? OutVelo = slider12;
		LastVelo = Outvelo;
		);
	(CCtoVelo && OKChanV && InMess == 144 && InVelo>0
	&& InNote>=Slider4 && InNote<=Slider5 
	&& InVelo>=Slider6 && Invelo <=Slider7) ? (
		ChanV >= 0 ? (ChanVmsg1 = 144+ChanV):(ChanVmsg1 = 144+InChan);
		midisend (ts,chanVmsg1,InNote|OutVelo*256);
		LastVelo = Outvelo;
		);
	
	// pass thru notes that the filter did not re=assign the velocity
	(Slider1 == 3 || slider1==4) && OKChanV && InMess == 144 && InVelo>0 
	&& (InNote<Slider4 || InNote>Slider5 || InVelo<Slider6 || Invelo>Slider7) 
	? (
		midisend(ts,msg1,msg23);
		LastVelo = InVelo;
		);
	
	//   pass thru cc in channel 
	Slider1 == 3 && (OKChanV!=1 || InMess!=144) ?(
		midisend(ts,msg1,msg23);
		x=1;
		);
	
	// don't send cc inchannel, but pass thru any other channel message
	Slider1 == 4 && OKChanV!=1 ?(
		midisend(ts,msg1,msg23);
		x=1;
		);
	
	//Slider1 == 5 block all but generated not
	
	
	slider8=  LastVelo;
	slider11= LastCC;
/////////////////////////////////////////////////////

	);



);



